import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
const INPUT_FIELD_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MiniDropdownComponent),
    multi: true
};
let MiniDropdownComponent = class MiniDropdownComponent {
    constructor() {
        this.isReadOnly = false;
        this.changeValue = new EventEmitter();
        this.innerValue = '';
        this.onChangeCb = () => { };
        this.onTouchedCb = () => { };
    }
    get value() {
        return this.innerValue;
    }
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCb(v);
        }
    }
    onBlur() {
        this.onTouchedCb;
    }
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    }
    registerOnChange(fn) {
        this.onChangeCb = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCb = fn;
    }
    setDisabledState(isDisabled) {
        this.isReadOnly = isDisabled;
    }
    onChange(v) {
        this.changeValue.emit(v);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], MiniDropdownComponent.prototype, "data", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], MiniDropdownComponent.prototype, "isReadOnly", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], MiniDropdownComponent.prototype, "changeValue", void 0);
MiniDropdownComponent = tslib_1.__decorate([
    Component({
        selector: 'app-mini-dropdown',
        template: "<select class=\"custom-select d-block w-100 custom-select-iris\" [(ngModel)]=\"value\" (ngModelChange)=\"onChange($event)\">\r\n    <option *ngFor=\"let item of data\" [ngValue]=\"item.id\">{{item.name}}</option>\r\n</select>",
        providers: [INPUT_FIELD_VALUE_ACCESSOR],
        styles: [".custom-select-iris{background-color:#1b7ccb;color:#fff;border-radius:20px;font-size:11px;background-image:url(../../../../assets/img/arrow-down.png);background-size:initial;font-family:Gotham;border:none}"]
    }),
    tslib_1.__metadata("design:paramtypes", [])
], MiniDropdownComponent);
export { MiniDropdownComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluaS1kcm9wZG93bi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcHAtaXJpcy1oZWFkZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL3NoYXJlZC9jb21wb25lbnRzL21pbmktZHJvcGRvd24vbWluaS1kcm9wZG93bi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUcsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFHLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxNQUFNLDBCQUEwQixHQUFRO0lBQ3RDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztJQUNwRCxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUE7QUFRRCxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQTJDaEM7UUF4Q1MsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUVsQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFHbkMsZUFBVSxHQUFRLEVBQUUsQ0FBQztRQXFDN0IsZUFBVSxHQUFvQixHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7UUFDdkMsZ0JBQVcsR0FBb0IsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO0lBSHhCLENBQUM7SUFqQ2pCLElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsQ0FBUztRQUNqQixJQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFDO1lBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDbkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFVO1FBQ25CLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsZ0JBQWdCLENBQUUsVUFBa0I7UUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQU9ELFFBQVEsQ0FBQyxDQUFDO1FBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNGLENBQUE7QUFqRFU7SUFBUixLQUFLLEVBQUU7O21EQUFTO0FBQ1I7SUFBUixLQUFLLEVBQUU7O3lEQUFvQjtBQUVsQjtJQUFULE1BQU0sRUFBRTs7MERBQWtDO0FBTGhDLHFCQUFxQjtJQU5qQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLDZPQUE2QztRQUU3QyxTQUFTLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQzs7S0FDeEMsQ0FBQzs7R0FDVyxxQkFBcUIsQ0FtRGpDO1NBbkRZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgZm9yd2FyZFJlZiAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuY29uc3QgSU5QVVRfRklFTERfVkFMVUVfQUNDRVNTT1I6IGFueSA9IHtcclxuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNaW5pRHJvcGRvd25Db21wb25lbnQpLFxyXG4gIG11bHRpOiB0cnVlXHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLW1pbmktZHJvcGRvd24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9taW5pLWRyb3Bkb3duLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9taW5pLWRyb3Bkb3duLmNvbXBvbmVudC5jc3MnXSxcclxuICBwcm92aWRlcnM6IFtJTlBVVF9GSUVMRF9WQUxVRV9BQ0NFU1NPUl1cclxufSlcclxuZXhwb3J0IGNsYXNzIE1pbmlEcm9wZG93bkNvbXBvbmVudCBpbXBsZW1lbnRzICBDb250cm9sVmFsdWVBY2Nlc3NvcntcclxuXHJcbiAgQElucHV0KCkgZGF0YTpbXTtcclxuICBASW5wdXQoKSBpc1JlYWRPbmx5ID0gZmFsc2U7XHJcbiAgXHJcbiAgQE91dHB1dCgpIGNoYW5nZVZhbHVlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIFxyXG5cclxuICBwcml2YXRlIGlubmVyVmFsdWU6IGFueSA9ICcnO1xyXG5cclxuICBnZXQgdmFsdWUoKXtcclxuICAgIHJldHVybiB0aGlzLmlubmVyVmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXQgdmFsdWUodjogc3RyaW5nKXtcclxuICAgIGlmKHYgIT09IHRoaXMuaW5uZXJWYWx1ZSl7XHJcbiAgICAgIHRoaXMuaW5uZXJWYWx1ZSA9IHY7XHJcbiAgICAgIHRoaXMub25DaGFuZ2VDYih2KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQmx1cigpIHtcclxuICAgIHRoaXMub25Ub3VjaGVkQ2I7XHJcbiAgfVxyXG5cclxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5pbm5lclZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5pbm5lclZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMub25DaGFuZ2VDYiA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5vblRvdWNoZWRDYiA9IGZuO1xyXG4gIH1cclxuXHJcbiAgc2V0RGlzYWJsZWRTdGF0ZT8oaXNEaXNhYmxlZDpib29sZWFuKSA6IHZvaWQge1xyXG4gICAgdGhpcy5pc1JlYWRPbmx5ID0gaXNEaXNhYmxlZDsgXHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBvbkNoYW5nZUNiOiAoXzphbnkpID0+IHZvaWQgPSAoKSA9PiB7fTtcclxuICBvblRvdWNoZWRDYjogKF86YW55KSA9PiB2b2lkID0gKCkgPT4ge307XHJcblxyXG4gIG9uQ2hhbmdlKHYpe1xyXG4gICAgdGhpcy5jaGFuZ2VWYWx1ZS5lbWl0KHYpO1xyXG4gIH1cclxufVxyXG4iXX0=