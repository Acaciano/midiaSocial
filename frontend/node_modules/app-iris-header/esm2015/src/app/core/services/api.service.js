import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { environment } from '../../../environments/environment';
let ApiService = class ApiService {
    constructor(http) {
        this.http = http;
    }
    get(path, params = new HttpParams()) {
        return this.http.get(`${environment.API_URL}${path}`, { params });
    }
    getPagination(path, start, end) {
        return this.http.get(`${environment.API_URL}${path}?_start=${start}&_end=${end}`);
    }
    put(path, body = {}) {
        return this.http.put(`${environment.API_URL}${path}`, JSON.stringify(body));
    }
    post(path, body = {}, httpOptions) {
        console.log(JSON.stringify(body));
        return this.http.post(`${environment.API_URL}${path}`, JSON.stringify(body), httpOptions);
    }
    postFormData(path, body = {}, httpOptions) {
        const newBody = this.getFormUrlEncoded(body);
        return this.http.post(`${environment.API_URL}${path}`, newBody.toString(), httpOptions);
    }
    getFormUrlEncoded(toConvert) {
        const urlSearchParams = new URLSearchParams();
        // tslint:disable-next-line:forin
        for (const property in toConvert) {
            const encodedKey = property;
            const encodedValue = toConvert[property];
            urlSearchParams.append(encodedKey, encodedValue);
        }
        return urlSearchParams;
    }
    delete(path) {
        return this.http.delete(`${environment.API_URL}${path}`);
    }
};
ApiService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], ApiService);
export { ApiService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcHAtaXJpcy1oZWFkZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL2NvcmUvc2VydmljZXMvYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFHaEUsSUFBYSxVQUFVLEdBQXZCLE1BQWEsVUFBVTtJQUNyQixZQUNVLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFDdEIsQ0FBQztJQUVFLEdBQUcsQ0FBQyxJQUFZLEVBQUUsU0FBcUIsSUFBSSxVQUFVLEVBQUU7UUFDNUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTSxhQUFhLENBQUMsSUFBWSxFQUFFLEtBQWEsRUFBRSxHQUFXO1FBQzNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksV0FBVyxLQUFLLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRU0sR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLEVBQUU7UUFDeEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDbEIsR0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksRUFBRSxFQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLElBQUksQ0FBQyxJQUFZLEVBQUUsT0FBZSxFQUFFLEVBQUUsV0FBWTtRQUN2RCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVsQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNuQixHQUFHLFdBQVcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFFLEVBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ3BCLFdBQVcsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFTSxZQUFZLENBQUMsSUFBWSxFQUFFLE9BQWUsRUFBRSxFQUFFLFdBQVc7UUFDOUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ25CLEdBQUcsV0FBVyxDQUFDLE9BQU8sR0FBRyxJQUFJLEVBQUUsRUFDL0IsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUNsQixXQUFXLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRU0saUJBQWlCLENBQUMsU0FBUztRQUNoQyxNQUFNLGVBQWUsR0FBSSxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBRS9DLGlDQUFpQztRQUNqQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRTtZQUNoQyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUM7WUFDNUIsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3pDLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFJO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNGLENBQUE7QUFwRFksVUFBVTtJQUR0QixVQUFVLEVBQUU7NkNBR0ssVUFBVTtHQUZmLFVBQVUsQ0FvRHRCO1NBcERZLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tICcuLi8uLi8uLi9lbnZpcm9ubWVudHMvZW52aXJvbm1lbnQnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnRcclxuICApIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0KHBhdGg6IHN0cmluZywgcGFyYW1zOiBIdHRwUGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHtlbnZpcm9ubWVudC5BUElfVVJMfSR7cGF0aH1gLCB7IHBhcmFtcyB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRQYWdpbmF0aW9uKHBhdGg6IHN0cmluZywgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7ZW52aXJvbm1lbnQuQVBJX1VSTH0ke3BhdGh9P19zdGFydD0ke3N0YXJ0fSZfZW5kPSR7ZW5kfWApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHB1dChwYXRoOiBzdHJpbmcsIGJvZHk6IG9iamVjdCA9IHt9KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KFxyXG4gICAgICBgJHtlbnZpcm9ubWVudC5BUElfVVJMfSR7cGF0aH1gLFxyXG4gICAgICBKU09OLnN0cmluZ2lmeShib2R5KSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcG9zdChwYXRoOiBzdHJpbmcsIGJvZHk6IG9iamVjdCA9IHt9LCBodHRwT3B0aW9ucz8pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYm9keSkpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChcclxuICAgICAgYCR7ZW52aXJvbm1lbnQuQVBJX1VSTH0ke3BhdGh9YCxcclxuICAgICAgSlNPTi5zdHJpbmdpZnkoYm9keSksXHJcbiAgICAgIGh0dHBPcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwb3N0Rm9ybURhdGEocGF0aDogc3RyaW5nLCBib2R5OiBvYmplY3QgPSB7fSwgaHR0cE9wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgbmV3Qm9keSA9IHRoaXMuZ2V0Rm9ybVVybEVuY29kZWQoYm9keSk7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoXHJcbiAgICAgIGAke2Vudmlyb25tZW50LkFQSV9VUkx9JHtwYXRofWAsXHJcbiAgICAgIG5ld0JvZHkudG9TdHJpbmcoKSxcclxuICAgICAgaHR0cE9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEZvcm1VcmxFbmNvZGVkKHRvQ29udmVydCkge1xyXG4gICAgY29uc3QgdXJsU2VhcmNoUGFyYW1zICA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cclxuICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gdG9Db252ZXJ0KSB7XHJcbiAgICAgIGNvbnN0IGVuY29kZWRLZXkgPSBwcm9wZXJ0eTtcclxuICAgICAgY29uc3QgZW5jb2RlZFZhbHVlID0gdG9Db252ZXJ0W3Byb3BlcnR5XTtcclxuICAgICAgdXJsU2VhcmNoUGFyYW1zLmFwcGVuZChlbmNvZGVkS2V5LCBlbmNvZGVkVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmxTZWFyY2hQYXJhbXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGVsZXRlKHBhdGgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoYCR7ZW52aXJvbm1lbnQuQVBJX1VSTH0ke3BhdGh9YCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==