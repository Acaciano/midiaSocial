import { __decorate, __metadata } from 'tslib';
import { Injectable, EventEmitter, Input, Output, Component, ViewEncapsulation, ElementRef, forwardRef, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { registerLocaleData, CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { NgxSmartModalModule } from 'ngx-smart-modal';
import { NgbModal, NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { HttpParams, HttpClient } from '@angular/common/http';
import localePt from '@angular/common/locales/pt';

// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
const environment = {
    production: false,
    defaultLocale: 'pt',
    API_URL: 'http://localhost:3000'
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.

let ApiService = class ApiService {
    constructor(http) {
        this.http = http;
    }
    get(path, params = new HttpParams()) {
        return this.http.get(`${environment.API_URL}${path}`, { params });
    }
    getPagination(path, start, end) {
        return this.http.get(`${environment.API_URL}${path}?_start=${start}&_end=${end}`);
    }
    put(path, body = {}) {
        return this.http.put(`${environment.API_URL}${path}`, JSON.stringify(body));
    }
    post(path, body = {}, httpOptions) {
        console.log(JSON.stringify(body));
        return this.http.post(`${environment.API_URL}${path}`, JSON.stringify(body), httpOptions);
    }
    postFormData(path, body = {}, httpOptions) {
        const newBody = this.getFormUrlEncoded(body);
        return this.http.post(`${environment.API_URL}${path}`, newBody.toString(), httpOptions);
    }
    getFormUrlEncoded(toConvert) {
        const urlSearchParams = new URLSearchParams();
        // tslint:disable-next-line:forin
        for (const property in toConvert) {
            const encodedKey = property;
            const encodedValue = toConvert[property];
            urlSearchParams.append(encodedKey, encodedValue);
        }
        return urlSearchParams;
    }
    delete(path) {
        return this.http.delete(`${environment.API_URL}${path}`);
    }
};
ApiService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [HttpClient])
], ApiService);

let NoticeService = class NoticeService {
    constructor(api) {
        this.api = api;
    }
    get() {
        return this.api.get('/aviso');
    }
    getPagination(start, end) {
        return this.api.getPagination('/aviso', start, end);
    }
};
NoticeService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [ApiService])
], NoticeService);

let OccurrenceService = class OccurrenceService {
    constructor(api) {
        this.api = api;
    }
    get() {
        return this.api.get(`/ocorrencia`);
    }
    put(occurrence) {
        return this.api.put(`/ocorrencia`, occurrence);
    }
};
OccurrenceService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [ApiService])
], OccurrenceService);

let ProfileService = class ProfileService {
    constructor(api) {
        this.api = api;
    }
    get() {
        return this.api.get(`/perfil`);
    }
};
ProfileService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [ApiService])
], ProfileService);

let HeaderComponent = class HeaderComponent {
    constructor(noticeService, occurrenceService, profileService, modalService, elementRef) {
        this.noticeService = noticeService;
        this.occurrenceService = occurrenceService;
        this.profileService = profileService;
        this.modalService = modalService;
        this.elementRef = elementRef;
        this.actionSelect = new EventEmitter();
        let scriptChat = document.createElement('script');
        scriptChat.type = "text/javascript";
        scriptChat.src = "https://cdn.agentbot.net/core/59ff0a5f9b3b351736d6d5c751b6fc3d.js";
        this.elementRef.nativeElement.appendChild(scriptChat);
    }
    ngOnInit() {
        this.profileService.get().subscribe(data => {
            this.profiles = data;
            this.profile = this.profiles[0].id;
        });
        this.occurrenceService.get().subscribe(data => {
            this.occurrences = data;
            this.unreadOccurrence = data.filter((item) => {
                return !item.lido;
            }).length;
        });
        this.noticeService.get().subscribe(data => this.notices = data);
        setTimeout(() => {
            $aivo.ready(function () {
                $aivo.user.set("key", "123456");
                $aivo.user.set("name", "Acaciano Neves Souza");
                $aivo.user.set("email", "acaciano.neves@gmail.com");
                $aivo.user.set("device", "11 942480645");
                $aivo.user.set("instituto", "Instituto Teste");
            });
        }, 1000);
    }
    openModal(content) {
        this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title', windowClass: 'iris-modal' }).result.then(() => { }, (reason) => { });
    }
    readMessage(occurrence) {
        if (this.unreadOccurrence > 0) {
            occurrence.lido = true;
            this.occurrenceService.put(occurrence);
            this.unreadOccurrence--;
        }
    }
    changeProfile() {
        this.actionSelect.emit(this.profile);
    }
    logOut() {
        localStorage.removeItem(this.logOutName);
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], HeaderComponent.prototype, "logOutName", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], HeaderComponent.prototype, "nameUser", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], HeaderComponent.prototype, "actionSelect", void 0);
HeaderComponent = __decorate([
    Component({
        selector: 't-systems-iris-header',
        template: "<div class=\"header-iris\">\r\n    <div class=\"header-container\">\r\n        <div class=\"logo\"></div>\r\n        <div class=\"logo-hc\"></div>\r\n        <div class=\"logo-faepa\"></div>\r\n        <div class=\"separator\"></div>\r\n        <ul class=\"nav nav-mtd tabs-info z-depth-1\" role=\"tablist\">\r\n            <li class=\"nav-item nav-btn-iris\">\r\n                <app-mini-dropdown [data]=\"profiles\" [(ngModel)]=\"profile\" (changeValue)=\"changeProfile()\">\r\n                </app-mini-dropdown>\r\n            </li>\r\n            <li class=\"nav-item nav-btn-iris\">\r\n                <app-mini-button (click)=\"openModal(contentOccurrence)\" title=\"Ocorrencias\" icon=\"bell\"\r\n                    [num]=\"unreadOccurrence\"></app-mini-button>\r\n            </li>\r\n            <li class=\"nav-item nav-btn-iris\">\r\n                <app-mini-button (click)=\"openModal(contentNotice)\" icon=\"exclamation-circle\" title=\"Avisos\">\r\n                </app-mini-button>\r\n            </li>\r\n            <div class=\"content-right-header\">\r\n                <div class=\"container-user-login\">\r\n                    Ol\u00E1, {{nameUser}}\r\n                </div>\r\n                <div class=\"container-user-login\">\r\n                    <a (click)=\"logOut()\" href=\"javascript:\">\r\n                        <i class=\"fas fa-cog\" placement=\"bottom\" ngbTooltip=\"Alterar Senha\"\r\n                            tooltipClass=\"tooltip-iris\"></i>\r\n                    </a>\r\n                    |\r\n                    <a href=\"javascript:\">\r\n                        <i class=\"fas fa-comment agent-launcher\" placement=\"bottom\" ngbTooltip=\"Chat\" tooltipClass=\"tooltip-iris\"></i>\r\n                    </a>\r\n                    |\r\n                    <a (click)=\"logOut()\" href=\"javascript:\">\r\n                        <i class=\"fas fa-power-off\" placement=\"bottom\" ngbTooltip=\"Sair\"\r\n                            tooltipClass=\"tooltip-iris\"></i>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </ul>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<ng-template #contentOccurrence let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" id=\"modal-basic-title\">Ocorr\u00EAncias</h4>\r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div *ngFor=\"let item of occurrences\" style=\"cursor: pointer;\" class=\"alert alert-secondary alert-non-read\"\r\n            [ngClass]=\"{'alert-read': item.lido}\" role=\"alert\">\r\n            <div class=\"date-alert\">\r\n                {{item.data | date: 'dd/MM/yyyy HH:mm'}}\r\n            </div>\r\n            <i class=\"far fa-check-square unread-icon\" *ngIf=\"!item.lido\"></i>\r\n            <i class=\"fas fa-check-square read-icon\" *ngIf=\"item.lido\"></i>\r\n            <a (click)=\"readMessage(item)\">{{item.mensagem}}</a>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #contentNotice let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" id=\"modal-basic-title\">Avisos</h4>\r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <div *ngFor=\"let item of notices\" class=\"alert alert-secondary alert-default-iris\" role=\"alert\">\r\n            {{item.mensagem}} - {{item.data | date: 'dd/MM/yyyy HH:mm'}}\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<router-outlet></router-outlet>",
        encapsulation: ViewEncapsulation.None,
        styles: [".header-iris{width:100%;height:65px;float:left;box-shadow:0 5px 54px 2px rgba(0,0,0,.31);box-sizing:border-box;background-color:#fff;display:table;padding-top:10px}.header-container{width:1000px;margin:0 auto;position:relative}.logo{width:60px;height:22px;float:left;background:url(../../assets/img/logo.png);margin-top:12px}.logo-hc{width:60px;height:50px;float:left;background:url(../../assets/img/HC.png) 0 0/contain no-repeat;margin-top:4px;margin-left:10px}.logo-faepa{width:40px;height:50px;float:left;background:url(../../assets/img/Faepa.jpg) 0 0/contain no-repeat;margin-top:4px;margin-left:10px}.separator{width:1px;height:50px;float:left;background-color:#eef0f4;margin-left:15px;margin-right:15px}.nav-btn-iris{margin-top:5px;margin-right:5px}.nav-bar-iris{padding:0}.content-right-header{position:absolute;right:0;margin-top:5px}.container-user-login{width:100%;float:left;font-family:Gotham;font-size:11px;font-weight:700;color:#1368ad;text-align:right}.logout-button{margin-left:5px}.iris-modal .modal-content{background-color:#fff;font-family:Gotham;box-shadow:0 2px 28px 3px rgba(0,0,0,.24);border-radius:5px}.light-blue-backdrop{background-color:#5cb3fd}.modal-title{margin-bottom:0;line-height:1.5;font-weight:300;font-size:24px;color:#0870b3}.iris-modal .close{color:#0870b3}.alert-non-read{border-radius:5px;font-size:12px;font-weight:700;background-color:#fff}.alert-read{border-color:#0a88d9;font-weight:400}.date-alert{width:100%;font-size:10px}.unread-icon{position:absolute;right:10px;font-size:16px;top:10px}.read-icon{position:absolute;right:10px;font-size:16px;top:10px;color:#0a88d9}.alert-default-iris{background-color:#fff;font-size:12px}@media screen and (max-width:1000px){.header-container{width:100%;float:left;padding-left:10px;padding-right:10px;box-sizing:border-box}.content-right-header{right:10px}}"]
    }),
    __metadata("design:paramtypes", [NoticeService,
        OccurrenceService,
        ProfileService,
        NgbModal,
        ElementRef])
], HeaderComponent);

const INPUT_FIELD_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MiniDropdownComponent),
    multi: true
};
let MiniDropdownComponent = class MiniDropdownComponent {
    constructor() {
        this.isReadOnly = false;
        this.changeValue = new EventEmitter();
        this.innerValue = '';
        this.onChangeCb = () => { };
        this.onTouchedCb = () => { };
    }
    get value() {
        return this.innerValue;
    }
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCb(v);
        }
    }
    onBlur() {
        this.onTouchedCb;
    }
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    }
    registerOnChange(fn) {
        this.onChangeCb = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCb = fn;
    }
    setDisabledState(isDisabled) {
        this.isReadOnly = isDisabled;
    }
    onChange(v) {
        this.changeValue.emit(v);
    }
};
__decorate([
    Input(),
    __metadata("design:type", Array)
], MiniDropdownComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MiniDropdownComponent.prototype, "isReadOnly", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], MiniDropdownComponent.prototype, "changeValue", void 0);
MiniDropdownComponent = __decorate([
    Component({
        selector: 'app-mini-dropdown',
        template: "<select class=\"custom-select d-block w-100 custom-select-iris\" [(ngModel)]=\"value\" (ngModelChange)=\"onChange($event)\">\r\n    <option *ngFor=\"let item of data\" [ngValue]=\"item.id\">{{item.name}}</option>\r\n</select>",
        providers: [INPUT_FIELD_VALUE_ACCESSOR],
        styles: [".custom-select-iris{background-color:#1b7ccb;color:#fff;border-radius:20px;font-size:11px;background-image:url(../../../../assets/img/arrow-down.png);background-size:initial;font-family:Gotham;border:none}"]
    }),
    __metadata("design:paramtypes", [])
], MiniDropdownComponent);

let MiniButtonComponent = class MiniButtonComponent {
    constructor() { }
    ngOnInit() {
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], MiniButtonComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MiniButtonComponent.prototype, "num", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MiniButtonComponent.prototype, "icon", void 0);
MiniButtonComponent = __decorate([
    Component({
        selector: 'app-mini-button',
        template: "<button type=\"button\" class=\"btn btn-primary btn-iris\">\r\n    <i class=\"fas fa-{{icon}} icon-button-iris\"></i>\r\n    {{title}} <span class=\"badge badge-light\">{{num}}</span>\r\n</button>",
        styles: [".btn-iris{background-color:#e6e6e6;border:none;font-size:10px;font-family:Gotham;border-radius:20px;padding:8px 8px 8px 25px;color:#185689;font-weight:700;text-transform:uppercase;position:relative}.icon-button-iris{position:absolute;left:10px;top:10px}"]
    }),
    __metadata("design:paramtypes", [])
], MiniButtonComponent);

registerLocaleData(localePt);
let HeaderModule = class HeaderModule {
};
HeaderModule = __decorate([
    NgModule({
        declarations: [
            HeaderComponent,
            MiniDropdownComponent,
            MiniButtonComponent
        ],
        imports: [
            CommonModule,
            FormsModule,
            NgxSmartModalModule.forRoot(),
            NgbModule
        ],
        exports: [
            HeaderComponent,
            MiniButtonComponent
        ],
        schemas: [CUSTOM_ELEMENTS_SCHEMA],
        providers: [
            ApiService,
            NoticeService,
            OccurrenceService,
            ProfileService
        ],
    })
], HeaderModule);

/**
 * Generated bundle index. Do not edit.
 */

export { HeaderModule, HeaderComponent as ɵa, NoticeService as ɵb, ApiService as ɵc, OccurrenceService as ɵd, ProfileService as ɵe, MiniDropdownComponent as ɵf, MiniButtonComponent as ɵg };
//# sourceMappingURL=app-iris-header.js.map
