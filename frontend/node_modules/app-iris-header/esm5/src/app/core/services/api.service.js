import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { environment } from '../../../environments/environment';
var ApiService = /** @class */ (function () {
    function ApiService(http) {
        this.http = http;
    }
    ApiService.prototype.get = function (path, params) {
        if (params === void 0) { params = new HttpParams(); }
        return this.http.get("" + environment.API_URL + path, { params: params });
    };
    ApiService.prototype.getPagination = function (path, start, end) {
        return this.http.get("" + environment.API_URL + path + "?_start=" + start + "&_end=" + end);
    };
    ApiService.prototype.put = function (path, body) {
        if (body === void 0) { body = {}; }
        return this.http.put("" + environment.API_URL + path, JSON.stringify(body));
    };
    ApiService.prototype.post = function (path, body, httpOptions) {
        if (body === void 0) { body = {}; }
        console.log(JSON.stringify(body));
        return this.http.post("" + environment.API_URL + path, JSON.stringify(body), httpOptions);
    };
    ApiService.prototype.postFormData = function (path, body, httpOptions) {
        if (body === void 0) { body = {}; }
        var newBody = this.getFormUrlEncoded(body);
        return this.http.post("" + environment.API_URL + path, newBody.toString(), httpOptions);
    };
    ApiService.prototype.getFormUrlEncoded = function (toConvert) {
        var urlSearchParams = new URLSearchParams();
        // tslint:disable-next-line:forin
        for (var property in toConvert) {
            var encodedKey = property;
            var encodedValue = toConvert[property];
            urlSearchParams.append(encodedKey, encodedValue);
        }
        return urlSearchParams;
    };
    ApiService.prototype.delete = function (path) {
        return this.http.delete("" + environment.API_URL + path);
    };
    ApiService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpClient])
    ], ApiService);
    return ApiService;
}());
export { ApiService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcHAtaXJpcy1oZWFkZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL2NvcmUvc2VydmljZXMvYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFHaEU7SUFDRSxvQkFDVSxJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQ3RCLENBQUM7SUFFRSx3QkFBRyxHQUFWLFVBQVcsSUFBWSxFQUFFLE1BQXFDO1FBQXJDLHVCQUFBLEVBQUEsYUFBeUIsVUFBVSxFQUFFO1FBQzVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQU0sRUFBRSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRU0sa0NBQWEsR0FBcEIsVUFBcUIsSUFBWSxFQUFFLEtBQWEsRUFBRSxHQUFXO1FBQzNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksZ0JBQVcsS0FBSyxjQUFTLEdBQUssQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFTSx3QkFBRyxHQUFWLFVBQVcsSUFBWSxFQUFFLElBQWlCO1FBQWpCLHFCQUFBLEVBQUEsU0FBaUI7UUFDeEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDbEIsS0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLElBQU0sRUFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTSx5QkFBSSxHQUFYLFVBQVksSUFBWSxFQUFFLElBQWlCLEVBQUUsV0FBWTtRQUEvQixxQkFBQSxFQUFBLFNBQWlCO1FBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRWxDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ25CLEtBQUcsV0FBVyxDQUFDLE9BQU8sR0FBRyxJQUFNLEVBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ3BCLFdBQVcsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFTSxpQ0FBWSxHQUFuQixVQUFvQixJQUFZLEVBQUUsSUFBaUIsRUFBRSxXQUFXO1FBQTlCLHFCQUFBLEVBQUEsU0FBaUI7UUFDakQsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ25CLEtBQUcsV0FBVyxDQUFDLE9BQU8sR0FBRyxJQUFNLEVBQy9CLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFDbEIsV0FBVyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUVNLHNDQUFpQixHQUF4QixVQUF5QixTQUFTO1FBQ2hDLElBQU0sZUFBZSxHQUFJLElBQUksZUFBZSxFQUFFLENBQUM7UUFFL0MsaUNBQWlDO1FBQ2pDLEtBQUssSUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO1lBQ2hDLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQztZQUM1QixJQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDbEQ7UUFFRCxPQUFPLGVBQWUsQ0FBQztJQUN6QixDQUFDO0lBRU0sMkJBQU0sR0FBYixVQUFjLElBQUk7UUFDaEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFHLFdBQVcsQ0FBQyxPQUFPLEdBQUcsSUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQW5EVSxVQUFVO1FBRHRCLFVBQVUsRUFBRTtpREFHSyxVQUFVO09BRmYsVUFBVSxDQW9EdEI7SUFBRCxpQkFBQztDQUFBLEFBcERELElBb0RDO1NBcERZLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tICcuLi8uLi8uLi9lbnZpcm9ubWVudHMvZW52aXJvbm1lbnQnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnRcclxuICApIHsgfVxyXG5cclxuICBwdWJsaWMgZ2V0KHBhdGg6IHN0cmluZywgcGFyYW1zOiBIdHRwUGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHtlbnZpcm9ubWVudC5BUElfVVJMfSR7cGF0aH1gLCB7IHBhcmFtcyB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRQYWdpbmF0aW9uKHBhdGg6IHN0cmluZywgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7ZW52aXJvbm1lbnQuQVBJX1VSTH0ke3BhdGh9P19zdGFydD0ke3N0YXJ0fSZfZW5kPSR7ZW5kfWApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHB1dChwYXRoOiBzdHJpbmcsIGJvZHk6IG9iamVjdCA9IHt9KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KFxyXG4gICAgICBgJHtlbnZpcm9ubWVudC5BUElfVVJMfSR7cGF0aH1gLFxyXG4gICAgICBKU09OLnN0cmluZ2lmeShib2R5KSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcG9zdChwYXRoOiBzdHJpbmcsIGJvZHk6IG9iamVjdCA9IHt9LCBodHRwT3B0aW9ucz8pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYm9keSkpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChcclxuICAgICAgYCR7ZW52aXJvbm1lbnQuQVBJX1VSTH0ke3BhdGh9YCxcclxuICAgICAgSlNPTi5zdHJpbmdpZnkoYm9keSksXHJcbiAgICAgIGh0dHBPcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwb3N0Rm9ybURhdGEocGF0aDogc3RyaW5nLCBib2R5OiBvYmplY3QgPSB7fSwgaHR0cE9wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgbmV3Qm9keSA9IHRoaXMuZ2V0Rm9ybVVybEVuY29kZWQoYm9keSk7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoXHJcbiAgICAgIGAke2Vudmlyb25tZW50LkFQSV9VUkx9JHtwYXRofWAsXHJcbiAgICAgIG5ld0JvZHkudG9TdHJpbmcoKSxcclxuICAgICAgaHR0cE9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEZvcm1VcmxFbmNvZGVkKHRvQ29udmVydCkge1xyXG4gICAgY29uc3QgdXJsU2VhcmNoUGFyYW1zICA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cclxuICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gdG9Db252ZXJ0KSB7XHJcbiAgICAgIGNvbnN0IGVuY29kZWRLZXkgPSBwcm9wZXJ0eTtcclxuICAgICAgY29uc3QgZW5jb2RlZFZhbHVlID0gdG9Db252ZXJ0W3Byb3BlcnR5XTtcclxuICAgICAgdXJsU2VhcmNoUGFyYW1zLmFwcGVuZChlbmNvZGVkS2V5LCBlbmNvZGVkVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmxTZWFyY2hQYXJhbXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGVsZXRlKHBhdGgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoYCR7ZW52aXJvbm1lbnQuQVBJX1VSTH0ke3BhdGh9YCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==